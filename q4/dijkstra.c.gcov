        -:    0:Source:dijkstra.c
        -:    0:Graph:dijkstra.gcno
        -:    0:Data:dijkstra.gcda
        -:    0:Runs:1
        -:    1:// C program for Dijkstra's single source shortest path
        -:    2:// algorithm. The program is for adjacency matrix
        -:    3:// representation of the graph
        -:    4:
        -:    5:#include <limits.h>
        -:    6:#include <stdbool.h>
        -:    7:#include <stdio.h>
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:// Number of vertices in the graph
        -:   11:#define V 9
        -:   12:
        -:   13:// A utility function to find the vertex with minimum
        -:   14:// distance value, from the set of vertices not yet included
        -:   15:// in shortest path tree
        8:   16:int minDistance(int dist[], bool sptSet[])
        -:   17:{
        -:   18:    // Initialize min value
        8:   19:    int min = INT_MAX, min_index;
        -:   20:
       80:   21:    for (int v = 0; v < V; v++)
       72:   22:        if (sptSet[v] == false && dist[v] <= min)
       36:   23:            min = dist[v], min_index = v;
        -:   24:
        8:   25:    return min_index;
        -:   26:}
        -:   27:
        -:   28:// A utility function to print the constructed distance
        -:   29:// array
        1:   30:void printSolution(int dist[])
        -:   31:{
        1:   32:    printf("Vertex \t\t Distance from Source\n");
       10:   33:    for (int i = 0; i < V; i++)
        9:   34:        printf("%d \t\t\t\t %d\n", i, dist[i]);
        1:   35:}
        -:   36:
        -:   37:// Function that implements Dijkstra's single source
        -:   38:// shortest path algorithm for a graph represented using
        -:   39:// adjacency matrix representation
        1:   40:void dijkstra(int graph[V][V], int src)
        -:   41:{
        -:   42:    int dist[V]; // The output array.  dist[i] will hold the
        -:   43:                 // shortest
        -:   44:    // distance from src to i
        -:   45:
        -:   46:    bool sptSet[V]; // sptSet[i] will be true if vertex i is
        -:   47:                    // included in shortest
        -:   48:    // path tree or shortest distance from src to i is
        -:   49:    // finalized
        -:   50:
        -:   51:    // Initialize all distances as INFINITE and stpSet[] as
        -:   52:    // false
       10:   53:    for (int i = 0; i < V; i++)
        9:   54:        dist[i] = INT_MAX, sptSet[i] = false;
        -:   55:
        -:   56:    // Distance of source vertex from itself is always 0
        1:   57:    dist[src] = 0;
        -:   58:
        -:   59:    // Find shortest path for all vertices
        9:   60:    for (int count = 0; count < V - 1; count++) {
        -:   61:        // Pick the minimum distance vertex from the set of
        -:   62:        // vertices not yet processed. u is always equal to
        -:   63:        // src in the first iteration.
        8:   64:        int u = minDistance(dist, sptSet);
        -:   65:
        -:   66:        // Mark the picked vertex as processed
        8:   67:        sptSet[u] = true;
        -:   68:
        -:   69:        // Update dist value of the adjacent vertices of the
        -:   70:        // picked vertex.
       80:   71:        for (int v = 0; v < V; v++)
        -:   72:
        -:   73:            // Update dist[v] only if is not in sptSet,
        -:   74:            // there is an edge from u to v, and total
        -:   75:            // weight of path from src to  v through u is
        -:   76:            // smaller than current value of dist[v]
       72:   77:            if (!sptSet[v] && graph[u][v]
       36:   78:                && dist[u] != INT_MAX
       36:   79:                && dist[u] + graph[u][v] < dist[v])
        8:   80:                dist[v] = dist[u] + graph[u][v];
        -:   81:    }
        -:   82:
        -:   83:    // print the constructed distance array
        1:   84:    printSolution(dist);
        1:   85:}
        -:   86:
        -:   87:// driver's code
        1:   88:int main()
        -:   89:{
        -:   90:    /* Let us create the example graph discussed above */
        -:   91:
        -:   92:    int matrix[V][V];
       10:   93:    for (int i = 0; i < V; i++) {
       90:   94:        for (int j = 0; j < V; j++) {
       81:   95:            if(i==j){
        9:   96:                matrix[i][j] = 0;
        9:   97:                continue;
        -:   98:            }
       72:   99:            printf("Enter the value of matrix[%d][%d]: ", i, j);
       72:  100:            if(!scanf("%d", &matrix[i][j])){
    #####:  101:                printf("Invalid input\n");
    #####:  102:                exit(1);
        -:  103:            }
       72:  104:            if(matrix[i][j]<0){
    #####:  105:                printf("Invalid input\n");
    #####:  106:                exit(1);
        -:  107:            }
        -:  108:        }
        -:  109:    }
        1:  110:    dijkstra(matrix, 0);
        -:  111:
        1:  112:    return 0;
        -:  113:}
